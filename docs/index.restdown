---
title: SDC7 Workflow API and Runners
markdown2extras: wiki-tables, code-friendly
apisections:
---

# Overview

This repo contains the SDC7 installer for Workflow API and Runners,
with specific modules, configurations and the required tools to
build and setup workflow zones either into SDC Headnode or Compute Nodes.

Please, note this is not the Open Source Version of `wf` and backend modules.
Those are publicly available at github. See
[node-workflow repo on github](https://github.com/kusor/node-workflow) and the
[wf docs](http://kusor.github.com/node-workflow/) for reference.


# Project details

- Repository: `git@git.joyent.com:workflow.git`
- Browsing: [https://mo.joyent.com/workflow](https://mo.joyent.com/workflow)
- Who: Pedro P. Candel
- Docs: [https://mo.joyent.com/docs/workflow](https://mo.joyent.com/docs/workflow)
- Tickets/bugs: [https://devhub.joyent.com/jira/browse/WORKFLOW](https://devhub.joyent.com/jira/browse/WORKFLOW)

# Developer Guide

## Adding a Node Module to Workflow's Sandbox

In order to make a new node module available to the Workflow's sandbox used by
the different workflow tasks, you first have to add that module to project's
`package.json` dependencies section.

Once you've added there, you need to regenerate the npm-shrinkwrap.json file.
Easier way is to just remove the current one, `rm -Rf node_modules` and run
make all again. Once all the modules have been installed, you need to run
`npm shrinkwrap` and the file will be regenerated with the lastest version of
the required modules.

Finally, in order to make your module available for the workflow tasks, you
need to add it to `etc/config.json.in` which is the file used to generate the
configuration file for a SDC setup.

# Operator Guide

## Logging and log level changes

Both, `wf-api` and `wf-runner` use Bunyan for logging. By default, both
processes are logging to the default SMF stdout file.

To know the exact file each service is logging to:

    svcs -L wf-api
    svcs -L wf-runner

If you want to see the Bunyan output pretty printed to stdout:

    cd /opt/smartdc/workflow
    tail -f `svcs -L wf-api` | ./node_modules/.bin/bunyan
    tail -f `svcs -L wf-runner` | ./node_modules/.bin/bunyan

By default, both services log level is `INFO`. This can be easily increased /
decreased by sending the processes SIGUSR2/SIGUSR1 signals.

In order to get the process number of the services:

    svcs -p wf-api
    svcs -p wf-runner

Then, you can change log levels using the previous process PID:

    kill -s SIGUSR2 <PID>
    kill -s SIGUSR1 <PID>

## Inspecting moray backend from the cli

Besides the default services, an additional `wf-console.js` script is provided,
which can be initialized and used to directly talk to the moray backend the same
way wf-moray-backend module does.

This script will start a REPL session using an unix socket. In order to
initialize the REPL session:

    cd /opt/smartdc/workflow
    ./build/node/bin/node wf-console.js &

The unix socket will be then available at `/tmp/node-repl.sock`. You can connect
to the socket using:

    nc -U /tmp/node-repl.sock

Available objects on the REPL session, apart of the default node globals are:

- `backend`: Moray workflow backend. Check `node_modules/wf-moray-backend` for the details on the available methods to manipulate workflows and jobs.
- `log`: Bunyan logger instance used to initialize the backend.
- `config`: Configuration file used to initialize the backend (JSON object).
- `wf`: Object which can provide access to any of the `wf` module defined objects.

Additionally, `backend` provides access to `moray-client` at `backend.client`, so you
can directly talk REST to `moray`. Look at `moray-client` module setup above `wf-moray-backend`.


## Watching for job failures (dtrace)

The `wf-runner` service fires some dtrace probes. We can use 'wf-job-done'
to watch for job failures. Run the following in the workflow zone:

    dtrace -qn 'workflow*:::wf-job-done /copyinstr(arg2) != "succeeded"/ { printf("%s %s %s\n", copyinstr(arg0), copyinstr(arg1), copyinstr(arg2)); }'

For example:

    [root@9b7dbc12-7374-48ef-841e-18708faf4619 (coal:workflow0) ~]# dtrace -qn 'workflow*:::wf-job-done /copyinstr(arg2) != "succeeded" / { printf("%s %s %s\n", copyinstr(arg0), copyinstr(arg1), copyinstr(arg2)); }'
    6205964e-b588-4605-893a-e72c98a8dc28 provision-7.0.2 failed


## Watching for job completion (bunyan)

In the workflow zone:

    bunyan -p wf-runner -l info -c 'this.runtime'

or:

    tail -f `svcs -L wf-runner` | bunyan -l info -c 'this.runtime'

Or use the 'warn' level to only get unsuccessful job completions.

For example:

    [root@9b7dbc12-7374-48ef-841e-18708faf4619 (coal:workflow0) ~]# tail -f `svcs -L wf-runner` | bunyan -l warn -c 'this.runtime'
    [2013-05-24T21:34:46.875Z]  WARN: workflow-runner/1370 on 9b7dbc12-7374-48ef-841e-18708faf4619: job completed (runner_uuid=9b7dbc12-7374-48ef-841e-18708faf4619, runtime=47471)
        job: {
          "uuid": "34bda784-beb9-49d4-971c-5a27b58b0e21",
          "name": "provision-7.0.2",
          "execution": "succeeded"
        }
